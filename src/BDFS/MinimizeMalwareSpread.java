package BDFS;

/*
924. Minimize Malware Spread
Hard

120

96

Favorite

Share
In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.



Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
Note:

1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length
 */

/*
for loop里面做bfs，每次ignore不同的位置。
注意visited要及时设为true（加进去时，而不是遍历的时候）
 */
import java.util.*;

public class MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if (graph == null || graph.length == 0 || graph[0] == null || initial == null || initial.length == 0) return -1;
        int min = Integer.MAX_VALUE;
        int res = -1;
        Arrays.sort(initial);
        for (int i = 0; i < initial.length; i++) {
            int malware = bfs(graph, initial, i);
            if (min > malware) {
                min = malware;
                res = initial[i];
            }
        }
        return res;
    }

    private int bfs(int[][] graph, int[] initial, int ignore) {
        boolean[] visited = new boolean[graph.length];
        Queue<Integer> q = new LinkedList<>();
        int res = 0;
        for (int i = 0; i < initial.length; i++) {
            if (i != ignore) {
                q.offer(initial[i]);
                res++;
                visited[initial[i]] = true;
            }
        }

        while (!q.isEmpty()) {
            int node = q.poll();
            for (int j = 0; j < graph[node].length; j++) {
                if (!visited[j] && graph[node][j] == 1) {
                    res++;
                    q.offer(j);
                    //这里如果visited在访问的时候再设为true，会错误
                    visited[j] = true;
                }
            }
        }
        return res;
    }

    public static void main(String[] args) {
        MinimizeMalwareSpread tester = new MinimizeMalwareSpread();
        int[][] graph = {{1,0,0}, {0,1,0}, {0,0,1}};
        int[] initial = {0,2};
        tester.minMalwareSpread(graph, initial);
    }
}
