package BDFS;
import java.util.*;

public class MinimizeMalwareSpread {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if (graph == null || graph.length == 0 || graph[0] == null || initial == null || initial.length == 0) return -1;
        int min = Integer.MAX_VALUE;
        int res = -1;
        Arrays.sort(initial);
        for (int i = 0; i < initial.length; i++) {
            int malware = bfs(graph, initial, i);
            if (min > malware) {
                min = malware;
                res = initial[i];
            }
        }
        return res;
    }

    private int bfs(int[][] graph, int[] initial, int ignore) {
        boolean[] visited = new boolean[graph.length];
        Queue<Integer> q = new LinkedList<>();
        int res = 0;
        for (int i = 0; i < initial.length; i++) {
            if (i != ignore) {
                q.offer(initial[i]);
                res++;
            }
        }

        while (!q.isEmpty()) {
            int node = q.poll();
            visited[node] = true;
            for (int i = 0; i < graph[node].length; i++) {
                if (!visited[graph[node][i]]) {
                    res++;
                    q.offer(graph[node][i]);
                }
            }
        }
        return res;
    }
}
